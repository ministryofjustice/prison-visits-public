references:
  defaults: &defaults
    working_directory: ~/repo

  github_team_name_slug: &github_team_name_slug
    GITHUB_TEAM_NAME_SLUG: prison-visits-booking

  deploy_container_config: &deploy_container_config
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools

  docker_container_config: &docker_container_config
    docker:
    - image: circleci/ruby:2.7.5-node-browsers
      environment:
        RAILS_ENV: test
        PGHOST: 127.0.0.1
        PGUSER: ubuntu
        RACK_ENV: test
    - image: circleci/postgres:12-alpine
      environment:
        POSTGRES_USER: ubuntu
        POSTGRES_PASSWORD: ""
        POSTGRES_DB: prisonvisitsbooking_test

  # install_gpg: &install_gpg
  #   run:
  #     name: Install GPG
  #     command: |
  #       apk add \
  #         --no-cache \
  #         --no-progress \
  #         gnupg

  # configure_gpg: &configure_gpg
  #   run:
  #     name: Configure GPG
  #     command: |
  #       echo "${GPG_PRIVATE_KEY}" | base64 -d | gpg --batch --allow-secret-key-import --import

  # decrypt_secrets: &decrypt_secrets
  #   run:
  #     name: Decrypt secrets file
  #     command: |
  #       gpg --export-ownertrust > /tmp/ownertrust.txt
  #       echo $GPG_KEY_ID:1 >> /tmp/ownertrust.txt
  #       gpg --import-ownertrust /tmp/ownertrust.txt
  #       gpgconf --kill gpg-agent
  #       gpg-agent --daemon --allow-preset-passphrase
  #       /usr/libexec/gpg-preset-passphrase --preset --passphrase $GPG_PASSPHRASE $GPG_KEY_KEYGRIP_ID
  #       git-crypt unlock


  # install_aws_cli: &install_aws_cli
  #   run:
  #     name: Set up aws
  #     command: |
  #       wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
  #       sudo apt-get update --allow-releaseinfo-change
  #       sudo apt-get --assume-yes install python3-pip
  #       sudo pip3 install awscli

  build_docker_image: &build_docker_image
    run:
      name: Build prison-visits-public docker image
      command: |
        export BUILD_DATE=$(date -Is) >> $BASH_ENV
        source $BASH_ENV
        docker build \
          --build-arg VERSION_NUMBER=${CIRCLE_BUILD_NUM} \
          --build-arg COMMIT_ID=${CIRCLE_SHA1} \
          --build-arg BUILD_DATE=${BUILD_DATE} \
          --build-arg BUILD_TAG=${CIRCLE_BRANCH} \
          -t app  .

  # push_docker_image: &push_docker_image
  #   run:
  #     name: Push prison-visits-booking docker image
  #     command: |
  #       login="$(aws ecr get-login --region eu-west-2 --no-include-email)"
  #       ${login}
  #       docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
  #       docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
  #       if [ "${CIRCLE_BRANCH}" == "main" ]; then
  #         docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
  #         docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
  #       fi
  #     environment:
  #       <<: *github_team_name_slug
  #       REPONAME: prison-visits-public

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0.0
  aws-ecr: circleci/aws-ecr@8.2.1 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate

jobs:
  install_dependencies:
    <<: *defaults
    <<: *docker_container_config
    steps:
    - checkout
    - attach_workspace:
        at: ~/repo
    - run:
        name: Which bundler?
        command: bundle -v
    - restore_cache:
        keys:
        - prison-visits-public-{{ checksum "Gemfile.lock" }}
        - prison-visits-public-
    - run:
        name: Update npm
        command: 'sudo npm install -g npm@8.1.2'
    - run:
        name: Install GOV.UK frontend modules
        command: sudo npm install -g npm@8.1.2
    - run: bundle check --path vendor/bundle || bundle install --path vendor/bundle
    - save_cache:
        key:  prison-visits-public-{{ checksum "Gemfile.lock" }}
        paths:
        - ~/repo/vendor/bundle
    - persist_to_workspace:
        root: .
        paths:
        - vendor/bundle
        - node_modules/

  test:
    <<: *defaults
    <<: *docker_container_config
    steps:
    - checkout
    - attach_workspace:
        at: ~/repo
    - run: gem install bundler
    - run: bundle --path vendor/bundle
    - run:
        name: Download Code Climate
        command: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
    - run:
        name: Rubocop
        command: bundle exec rubocop
    - run:
        name: Security analysis
        command: bundle exec brakeman -o ~/test-results/brakeman/brakeman.json -o ~/test-results/brakeman/brakeman.html
    - run:
        name: Run tests
        command: |
          ./cc-test-reporter before-build
          bundle exec rake
          ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?
        environment:
          RAILS_ENV: test
          RACK_ENV: test
    # - run:
    #     name: Jasmine tests
    #     command: bundle exec rake jasmine:ci
    - store_test_results:
        path: coverage
    - store_artifacts:
        path: coverage
    - store_artifacts:
        path: ~/test-results

  build_and_push_docker_image:
    <<: *defaults
    <<: *docker_container_config
    steps:
    - checkout
    - attach_workspace:
        at: ~/repo
    - setup_remote_docker:
        version: 19.03.13
        docker_layer_caching: true
    - *build_docker_image
    - aws-cli/setup:
        role_arn: $ECR_ROLE_TO_ASSUME
        region: $ECR_REGION
    - run: |
        aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
    - run:
        name: Setup, tag and push docker image
        command: |
          echo 'export DOCKER_TAGS=$CIRCLE_SHA1' >> $BASH_ENV
          docker tag app "${ECR_ENDPOINT}/${ECR_REPOSITORY}:${CIRCLE_SHA1}"
          if [ "${CIRCLE_BRANCH}" == "main" ]; then
            echo 'export DOCKER_TAGS=${DOCKER_TAGS},latest' >> $BASH_ENV
            docker tag app "${ECR_ENDPOINT}/${ECR_REPOSITORY}:latest"
          fi
          source $BASH_ENV
    - aws-ecr/push-image:
        tag: $DOCKER_TAGS
        region: $ECR_REGION
        repo: $ECR_REPOSITORY

  deploy_development:
    <<: *deploy_container_config
    steps:
    - checkout
    - attach_workspace:
        at: ~/repo
    - run:
        name: Kubectl deployment development setup
        command: |
          echo -n ${KUBE_ENV_DEVELOPMENT_CACERT} | base64 -d > ./ca.crt
          kubectl config set-cluster ${KUBE_ENV_DEVELOPMENT_NAME} --certificate-authority=./ca.crt --server=https://${KUBE_ENV_DEVELOPMENT_NAME}
          kubectl config set-credentials circleci --token=${KUBE_ENV_DEVELOPMENT_TOKEN}
          kubectl config set-context ${KUBE_ENV_DEVELOPMENT_NAME} --cluster=${KUBE_ENV_DEVELOPMENT_NAME} --user=circleci --namespace=${KUBE_ENV_DEVELOPMENT_NAMESPACE}
          kubectl config use-context ${KUBE_ENV_DEVELOPMENT_NAME}
    - deploy:
        name: Deploy to development
        command: |
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/development/deployment.yaml
            kubectl apply --record=false -f ./deploy/development
        environment:
          <<: *github_team_name_slug

  deploy_staging:
    <<: *deploy_container_config
    steps:
    - checkout
    - attach_workspace:
        at: ~/repo
    - run:
        name: Kubectl deployment staging setup
        command: |
          echo -n ${KUBE_ENV_STAGING_CACERT_LIVE} | base64 -d > ./ca.crt
          kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./ca.crt --server=https://${CLUSTER_NAME_LIVE}
          kubectl config set-credentials circleci --token=${KUBE_ENV_STAGING_TOKEN_LIVE}
          kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=${KUBE_ENV_STAGING_NAMESPACE}
          kubectl config use-context ${CLUSTER_NAME_LIVE}
    # - *install_gpg
    # - *configure_gpg
    # - *decrypt_secrets
    - deploy:
        name: Deploy to staging
        command: |
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/staging/deployment.yaml
            # kubectl annotate deployments/prison-visits-public kubernetes.io/change-cause="$CIRCLE_BUILD_URL"
            kubectl apply --record=false -f ./deploy/staging
        environment:
          <<: *github_team_name_slug

  deploy_production:
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Kubectl deployment production setup
          command: |
            echo -n ${KUBE_ENV_PRODUCTION_CACERT_LIVE} | base64 -d > ./ca.crt
            kubectl config set-cluster ${CLUSTER_NAME_LIVE} --certificate-authority=./ca.crt --server=https://${CLUSTER_NAME_LIVE}
            kubectl config set-credentials circleci --token=${KUBE_ENV_PRODUCTION_TOKEN_LIVE}
            kubectl config set-context ${CLUSTER_NAME_LIVE} --cluster=${CLUSTER_NAME_LIVE} --user=circleci --namespace=${KUBE_ENV_PRODUCTION_NAMESPACE}
            kubectl config use-context ${CLUSTER_NAME_LIVE}
      # - *install_gpg
      # - *configure_gpg
      # - *decrypt_secrets
      - deploy:
          name: Deploy to production
          command: |
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/production/deployment.yaml
            # kubectl annotate deployments/prison-visits-public kubernetes.io/change-cause="$CIRCLE_BUILD_URL"
            kubectl apply --record=false -f ./deploy/production
          environment:
            <<: *github_team_name_slug

workflows:
  version: 2
  build_and_test:
    jobs:
    - install_dependencies
    - test:
        requires:
          - install_dependencies
    - build_and_push_docker_image:
        requires:
          - test
    - deploy_development:
        requires:
          - build_and_push_docker_image
    - deploy_staging_approval:
        type: approval
        requires:
          - deploy_development
    - deploy_staging:
        requires:
          - deploy_staging_approval
    - deploy_production_approval:
        type: approval
        requires:
          - deploy_staging
        filters:
          branches:
            only: main
    - deploy_production:
        requires:
          - deploy_production_approval
        filters:
          branches:
            only: main
